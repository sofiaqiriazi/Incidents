{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(datasets)\nlibrary(magrittr)\nlibrary(XML)\nlibrary(reshape)\nlibrary(gsheet)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(zoo)\nlibrary(rjson)\n\n\n\n# Use the google spreadsheet\njetson <- \"https://docs.google.com/spreadsheets/d/1oPTPmoJ9phtMOkp-nMB7WHnPESomLzqUj9t0gcE9bYA\"\nconflicts <- gsheet2text(jetson, sheetid = 819472314)\nconflicts.long <- read.csv(text=conflicts)\n\narrs <-gsheet2text(jetson, sheetid = 457614883)\narrs.long <- read.csv(text=arrs)\n#arrs.long <- head(arrs.long, -30)\n\ndeps <-gsheet2text(jetson, sheetid = 677621454)\ndeps.long <-read.csv(text=deps)\n#deps.long <- head(deps.long, -30)\n\nrain <-gsheet2text(jetson, sheetid = 1473662223)\nrain.long <- read.csv(text=rain,stringsAsFactors = FALSE)\n#rain.long <- head(rain.long, -30)\n\n#read the WaterDrumPrices\nwater <-gsheet2text(jetson, sheetid =27261871)\nwater.long <- read.csv(text=water,stringsAsFactors = FALSE)\n\n#read the Rivers\nrivers <-gsheet2text(jetson, sheetid =407366559)\nrivers.long <- read.csv(text=water,stringsAsFactors = FALSE)\n\n#read the Goat Prices\ngoats <-gsheet2text(jetson, sheetid =1601716765)\ngoats.long <- read.csv(text=water,stringsAsFactors = FALSE)\n\n#read the Fatalities\nfatalities <-gsheet2text(jetson, sheetid =343810263)\nfatalities.long <- read.csv(text=water,stringsAsFactors = FALSE)\n\n\n\nDates <- sapply(conflicts.long[,1],as.character.Date)\nconflicts.long$Date <- as.Date(conflicts.long$Date, format=\"%m/%d/%Y\")\narrs.long$Date <- as.Date(arrs.long$Date, format=\"%m/%d/%Y\")\ndeps.long$Date <- as.Date(deps.long$Date, format=\"%m/%d/%Y\")\nrain.long$Date <-as.Date(rain.long$Date, format=\"%m/%d/%Y\")\nwater.long$Date <-as.Date(water.long$Date, format=\"%m/%d/%Y\")\nrivers.long$Date <-as.Date(rivers.long$Date, format=\"%m/%d/%Y\")\ngoats.long$Date <-as.Date(goats.long$Date, format=\"%m/%d/%Y\")\nfatalities.long$Date <-as.Date(fatalities.long$Date, format=\"%m/%d/%Y\")\n\n# Force columns to be text\nconflicts.long[,2:ncol(conflicts.long)] <- sapply(conflicts.long[,2:ncol(conflicts.long)], as.numeric)\narrs.long[,2:ncol(arrs.long)] <- sapply(arrs.long[,2:ncol(arrs.long)], as.numeric)\ndeps.long[,2:ncol(deps.long)] <- sapply(deps.long[,2:ncol(deps.long)], as.numeric)\nrain.long[,2:ncol(rain.long)] <- sapply(rain.long[,2:ncol(rain.long)], as.numeric)\nwater.long[,2:ncol(rain.long)] <- sapply(water.long[,2:ncol(rain.long)], as.numeric)\nrivers.long[,2:ncol(rain.long)] <- sapply(rivers.long[,2:ncol(rain.long)], as.numeric)\ngoats.long[,2:ncol(rain.long)] <- sapply(goats.long[,2:ncol(rain.long)], as.numeric)\nfatalities.long[,2:ncol(rain.long)] <- sapply(fatalities.long[,2:ncol(rain.long)], as.numeric)\n\nmonthStart <- function(x) {\n  x <- as.POSIXlt(x)\n  x$mday <- 1\n  as.Date(x)\n}\n\ndate_index <- function(x){\n  full.date <- as.POSIXct(x, tz=\"GMT\")\n  index <- which(conflicts.long$Date== monthStart(full.date))\n  return(index)\n}\n\nbay_6A_arrivals <- function(value, start, end, var1=0, var2=0, var3=0){\n\n  PA <- rep(NA, end-start)\n\n  \n  for (t in start:end){\n    #Bay_Arrival = Shabeellaha_Dhexe_rain +\n    if(value==arrs.long[t,\"Date\"]){\n    if(var1!=0){SD_R<-var1}\n    else{SD_R <- rain.long[t,\"Shabeellaha_Dhexe_rain\"]}\n      #delay(Woqooyi_Galbeed_Arrival, 1) + \n    if(var2!=0){WG_A<-var2}\n    else{WG_A <- arrs.long[(t-1),\"Woqooyi_Galbeed_Arrival\"]}\n    #wma(Togdheer_Arrival, 6) +\n    if(var3!=0){T_A<-var3}\n    else{T_A <- weighted.mean(arrs.long[ (t-6):t, \"Togdheer_Arrival\"])}\n    }\n    else{\n      SD_R <- rain.long[t,\"Shabeellaha_Dhexe_rain\"]\n      WG_A <- arrs.long[(t-1),\"Woqooyi_Galbeed_Arrival\"]\n      T_A <- weighted.mean(arrs.long[ (t-6):t, \"Togdheer_Arrival\"])\n    }\n    #max(\n    #2.84291053988138*Bakool_Arrival + \n    Bak_A <- 2.84291053988138*arrs.long[t,\"Bakool_Arrival\"]\n    #1.90605269499887*Bari_Arrival +\n    Bari_A <-  1.90605269499887* arrs.long[t,\"Bari_Arrival\"]\n    #0.582938861571093*Bay_Departures + \n    Bay_D <- 0.582938861571093*deps.long[t,\"Bay_Departures\"]\n    #delay(Woqooyi_Galbeed_Arrival, 1) -\n    WG_A2 <- arrs.long[(t-1),\"Woqooyi_Galbeed_Arrival\"]\n    #Shabeellaha_Dhexe_rain*sma(Jubbada_Hoose_Departures, 2) +\n    SH_R_JH_D <- -1*rain.long[t,\"Shabeellaha_Dhexe_rain\"]*mean(deps.long[(t-2):t,\"Jubbada_Hoose_Departures\"])\n    #- 0.0801078676959042*Hiiraan_WaterDrumPrice +\n    H_WDP <- -0.0801078676959042*as.numeric(water.long[t, \"Hiiraan_WaterDrumPrice\"])\n    #- 6.62472178142272*Awdal_Departures, \n    A_D <- -6.62472178142272*deps.long[t,\"Awdal_Departures\"]\n    #0.263886473589876*Bay_Departures)\n    Bay_D2 <- 0.263886473589876*deps.long[t,\"Bay_Departures\"]\n    \n    #Bay_Arrival = Shabeellaha_Dhexe_rain + delay(Woqooyi_Galbeed_Arrival, 1) + wma(Togdheer_Arrival, 6) \n    #+ max(2.84291053988138*Bakool_Arrival + 1.90605269499887*Bari_Arrival + 0.582938861571093*Bay_Departures \n    #+ delay(Woqooyi_Galbeed_Arrival, 1) - (Shabeellaha_Dhexe_rain*sma(Jubbada_Hoose_Departures, 2) )\n    #- 0.0801078676959042*Hiiraan_WaterDrumPrice - 6.62472178142272*Awdal_Departures, 0.263886473589876*Bay_Departures)\n    \n    \n    #breaking the function to section max\n    PA[t] <- 0\n    \n    section_max <- max(sum(Bak_A,Bari_A,Bay_D,WG_A2,SH_R_JH_D,H_WDP,A_D,na.rm=TRUE),Bay_D2)\n    \n    section_add <- sum(SD_R, WG_A, T_A, section_max, na.rm=TRUE)\n    \n    PA[t] <- section_add\n    \n  }\n  return(PA)\n}\n\nshinyServer(function(input, output, session) {\n  \n  \n  produce_slider <- function(x,start,end){\n    if(x ==\"Bay\"){\n      \n      exact_time <- paste(as.character(input$date),\" 01\") \n      \n      value <- as.Date(exact_time, format = \"%b %Y %d\")\n      position <- which(arrs.long$Date == value)\n      #session$sendCustomMessage(\"mymessage\", \"sofia\")\n\n      updateSliderInput(session, \"dep_var_1\", \"Rain in Shabeellaha Dhexe\",\n                                              #      as.character(rain.long[position,\"Shabeellaha_Dhexe_rain\"])), \n                        min = 0, max = (max(as.numeric(unlist(rain.long[,\"Shabeellaha_Dhexe_rain\"])),na.rm=T)) , step = 2)  \n      updateSliderInput(session, \"dep_var_2\", \"Arrivals in Woqooyi\",\n                        min = 0, max = (max(as.numeric(unlist(arrs.long[,\"Woqooyi_Galbeed_Arrival\"])),na.rm=T)+5000) , step = 2)  \n      updateSliderInput(session, \"dep_var_3\", \"Mean of Arrivals in Togdheer\",\n                        min = 0, max = (max(as.numeric(unlist(arrs.long[,\"Togdheer_Arrival\"])),na.rm=T)+5000) , step = 2)\n    \n   \n    }\n    else if(x!=\"Bay\"){\n      updateSliderInput(session, \"dep_var_1\", \"XXX\", min = 1, max = 10000,\n                        value = 0, step = 100)\n      updateSliderInput(session, \"dep_var_2\", \"XXX\", min = 1, max = 10000,\n                        value = 0, step = 100)\n      updateSliderInput(session, \"dep_var_3\", \"XXX\", min = 1, max = 10000,\n                        value = 0, step = 100)\n\n      output$arrivals_number <- renderText({\" \"\n        #as.character(bay_6A_arrivals(start,end)[position])\n      })\n      \n    }\n  }\n  \n  mydata <- reactive({\n    \n    # prepare columns for the merged graph\n    region <-input$region\n    time_start <- date_index(input$months[1])\n    time_end <- date_index(input$months[2])\n    \n    produce_slider(region, time_start, time_end)\n    #region <- \"Bay\"\n    \n    time_end <- date_index(as.Date(\"01/08/2017\",\"%d/%m/%Y\"))\n\n    reg_con <- paste(region,\"Conflict\",sep=\"_\")\n    reg_arr <- paste(region,\"Arrival\",sep=\"_\")\n    reg_dep <- paste(region,\"Departures\",sep=\"_\")\n    reg_rain <- paste(region,\"rain\",sep=\"_\")\n    \n    \n    A <- arrs.long[ time_start:time_end, reg_arr ]\n    FA <- rep(NA, (time_end-time_start+1))\n    pre_final <- length(A)-1\n    \n    \n    final <-length(A)\n    \n    var1<-as.numeric(input$dep_var_1)\n    var2<-as.numeric(input$dep_var_2)\n    var3<-as.numeric(input$dep_var_3)\n\n    exact_time <- paste(as.character(input$date),\" 01\") \n    \n    value <- as.Date(exact_time, format = \"%b %Y %d\")\n    position <- which(arrs.long$Date == value)\n    \n    output$arrivals_number <- renderText({paste(\"Sofia\",as.character(as.integer(bay_6A_arrivals(value,time_start,time_end,var1,var2,var3)[position])))\n      \n    })\n    FA<-bay_6A_arrivals(value,time_start,time_end,var1=var1,var2=var2,var3=var3)[time_start:time_end]\n    \n    D <- deps.long[ time_start:time_end, reg_dep ]\n    extend <- time_end-time_start + 1\n    \n    \n    long <- data.frame(\n      Period=rep((1:extend),2),\n      Date = conflicts.long$Date[time_start:time_end],\n      Population = c(FA, A), \n      Indicator=rep(c(\"Future Arrivals\", \n                      \"Arrivals\"), \n                    each=(extend)))\n    wide <- cbind(FA[time_start:time_end], \n                  A[time_start:time_end])\n    list(long=long, wide=wide)\n    \n    \n  })\n  \n  output$graph1 <- renderPlot({\n    \n    long <- mydata()[[\"long\"]]\n    \n    p <- ggplot(long[long$Indicator %in% input$Indicators,], \n                aes(x=Date, y=Population, group=Indicator), fill =\"black\" ,size=10)    \n    # mytheme3 <- theme(legend.text = element_text(face = \"italic\",colour=\"#008dfa\",\n    #                                              family = \"Lato\", size = rel(1)), \n    #                   axis.title = element_text(colour=\"#008dfa\",family = \"Lato\",\n    #                                             size = rel(1.5)), \n    #                   axis.text = element_text(family = \"Lato\",colour = \"steelblue1\",\n    #                                            size = rel(1.5)), \n    #                   axis.line = element_line(size = 1,colour = \"black\"), \n    #                   axis.ticks = element_line(colour=\"grey\",size = rel(0.2)),\n    #                   panel.grid.major = element_line(colour=\"#3f464b\",size = rel(0.1)), \n    #                   panel.grid.minor = element_blank(), \n    #                   panel.background = element_rect(fill = \"white\"), \n    #                   legend.key = element_rect(fill = \"whitesmoke\"), \n    #                   legend.title = element_text(colour = \"#008dfa\",size = rel(1.5),\n    #                                               family = \"Lato\"), \n    #                   plot.title = element_text(colour = \"#008dfa\", face = \"bold\",\n    #                                             size = rel(1.5),family = \"Lato\"))\n    p <- p + \n      geom_line(aes(colour = Indicator), size=1, alpha=.75) + \n      ggtitle(\"Arrivals, Departures, Incidents as Recorder\")+\n      scale_x_date(name=\"Month\", date_breaks = \"4 month\", date_minor_breaks = \"1 month\", date_labels = \"%b %Y\")+ \n      scale_y_continuous(labels = comma)\n    print(p)\n  })\n})\n\n",
    "created" : 1506867139589.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3187466624",
    "id" : "67664827",
    "lastKnownWriteTime" : 1506870926,
    "last_content_update" : 1506870926334,
    "path" : "~/UNHCR/App/FinalEngine/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}